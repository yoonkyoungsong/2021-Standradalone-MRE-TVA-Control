
#include "userbasic.h"


/********************check the windrow time***********************/

double checkWindowsTime(void) {
	LARGE_INTEGER  liCount, liFreq;

	QueryPerformanceCounter(&liCount);
	QueryPerformanceFrequency(&liFreq);

	return((liCount.QuadPart / ((double)(liFreq.QuadPart))) * 1000.0);

}


/********************idle time 함수***********************/

/* Parameter */
#define MRESAMPLINGTIME (double)(0.0005) 

/* Function */
void idleTime(double deltTime, double currentTime, double timeBuff[]) {

	double S = 0;

	if (deltTime - currentTime < MRESAMPLINGTIME)
	{
		while (1)
		{
			timeBuff[1] = checkWindowsTime() * 0.001;

			S += timeBuff[1] - timeBuff[0];
			double  sub = (deltTime - currentTime) + S;

			if (sub >= MRESAMPLINGTIME)
			{
				break;
			}

			timeBuff[0] = timeBuff[1];

		}
	}

}



/************* 텍스트파일 저장하기 ***************/

/* Fumction */
void writeTextFile(char name[], int k, double TOTALNUM, double data1[], double data2[], double data3[]) {

	FILE* pF1;  //task 시작 시간 data  // header 파일 만들기 

	char s1[20];
	sprintf(s1, "%d", k);
	char s2[20] = ".txt";
	//char way[1000] = "C:\\Users\\xde12\\OneDrive\\바탕 화면\\";

	strcat(name, s1);
	strcat(name, s2);


	pF1 = fopen(name, "w");

	for (int count = 0; count < TOTALNUM; count++)
	{
		fprintf(pF1, "%f %f %f\n", data1[count], data2[count], data3[count]);
	}

	fclose(pF1);

	printf("Storage data file\n");
}


void readTextFile(char name[], double TOTALNUM, double data1[], double data2[], double data3[]) {

	FILE* pF1;  //task 시작 시간 data  // header 파일 만들기 

	char s2[20] = ".txt";
	//char way[1000] = "C:\\Users\\xde12\\OneDrive\\바탕 화면\\";

	strcat(name, s2);

	pF1 = fopen(name, "r");

	for (int count = 0; count < TOTALNUM; count++)
	{
		fscanf(pF1, "%f\n", &data1[count]);
	}

	fclose(pF1);

	printf("Read data file\n");
}




//double filter[3] = { 0.0 };
//double row[3] = { 0.0 };

//double a[3] = { 1, - 1.69615815534415,   0.779927002939224 };
//double b[3] = { 0.110036498530388,   0, - 0.110036498530388 };

//double a[3] = { 1, -1.690996376887443,   0.732726030371816 };
//double b[3] = { 0.010432413371093,   0.020864826742187, 0.010432413371093 };

int filterOrder = 2;

//double a[9] = { 1, - 7.73137610381793,	26.2150282605247, - 50.9165477259444,	61.9580450053188, - 48.3688729334713,	23.6573240608026, - 6.62800649788525,	0.814405997727274 };
//double b[9] = { 2.15056873728813e-06,	0, - 8.60227494915250e-06,	0,	1.29034124237288e-05,	0, - 8.60227494915250e-06,	0,	2.15056873728813e-06 };

//double a[5] = { 1, - 3.85798397581731,	5.61456727984508, - 3.65303903233925,	0.896699169836463 };
//double b[5] = { 0.239623972984498, - 0.943341839047240, 	1.40749688187183, - 0.943341839047240,	0.239623972984498 };

double a[3] = { 1, - 1.75809041310769,	0.775679511049612 };
double b[3] = { 0.112160244475194,	0, - 0.112160244475194 };

void bandPassFilter(double Vmre[], double dataNum, double Vmref[]) {

	//for (int i = 2; i < dataNum ; i++) {
	//	
	//	row[0] = Vmre[i];

	//	filter[0] = b[0] * row[0] + b[1] * row[1] + b[2] * row[2] - (a[1] * filter[1] + a[2] * filter[2]);

	//	filter[2] = filter[1];
	//	filter[1] = filter[0];
	//	row[2] = row[1];
	//	row[1] = row[0];

	//	Vmref[i] = filter[0];
	//
	//}

	//for (int i = 0; i < filterOrder; i++) {
	//	Vmref[i] = Vmre[i];
	//}

	for (int i = filterOrder; i < dataNum; i++) {

		Vmref[i] = b[0] * Vmre[i];

		for (int j = 1; j < filterOrder + 1; j++) {
			Vmref[i] = Vmref[i] + (b[j] * Vmre[i - j] - a[j] * Vmref[i  - j]);
		}

		//Vmref[i] = 300 * Vmref[i];
	}

}




double f = 0.0;
double posbuff[3] = { 0.0 };
int positiveFlag = 0;
int negativeFlag = 0;
int freqFlag = 0;
int signcount = 0;


double zeroCrossing_orig(double Vmre, double* pastMRE, double* presentMRE, double time, double zctime[], int* iter) {

	posbuff[0] = posbuff[1];
	posbuff[1] = posbuff[2];
	posbuff[2] = Vmre;
	//printf("Vcmd = %f[V]\n", Vmre);

	if ((posbuff[0]> 0) && (posbuff[1] > 0) && (posbuff[2] > 0) && (positiveFlag = 0)) {
		positiveFlag = 1;
		negativeFlag = 0;
		signcount++;
	}

	if ((posbuff[0] < 0) && (posbuff[1] < 0) && (posbuff[2] < 0) && (negativeFlag = 0)) {
		negativeFlag = 1;
		positiveFlag = 0;
		signcount++;
	}

	if ((positiveFlag == 1) && (negativeFlag == 1)) {
		
		freqFlag = 1;
		positiveFlag = 0;
		negativeFlag = 0;

	}

	if (freqFlag == 1) {
		zctime[*iter] = time;
		f = 1 / (zctime[*iter] - zctime[*iter - 1])/2;
		*iter = *iter + 1;
		freqFlag = 0;
		//printf("freq = %f[Hz]\n", f);
	}

	return f;

}


double zeroCrossing(double Vmre[], int dataNum, double time, int iter) {

	signcount = 0;
	positiveFlag = 0;
	negativeFlag = 0;
	

	for (int i = 2; i < dataNum; i++) {

		if ((Vmre[i - 2] > 0) && (Vmre[i - 1] > 0) && (Vmre[i] > 0) && (positiveFlag == 0)) {
			positiveFlag = 1;
			negativeFlag = 0;
			signcount++;
		}


		if ((Vmre[i - 2] < 0) && (Vmre[i - 1] < 0) && (Vmre[i] < 0) && (negativeFlag == 0)) {
			negativeFlag = 1;
			positiveFlag = 0;
			signcount++;
		}

	}
	
	f = signcount / time / 2;

	//printf("freq = %f[Hz]\n", f);

	return f;

}



int s = 0;
char sendData= 0;

//졸업논문
//char motorRotation(double freq, int* pastStep, int* presentStep, int* direction) {
//	
//	s = 0;
//
//	if (freq <= 46.4) {
//		*presentStep = 0;
//	}
//	else if (freq > 46.4 && freq <= 47.3) {
//		*presentStep = 2;
//	}
//	else if (freq > 47.3 && freq <= 48.3) {
//		*presentStep = 3;
//	}
//	else if (freq > 48.3 && freq <= 49) {
//		*presentStep = 4;
//	}
//	else if (freq > 49 && freq <= 50.6) {
//		*presentStep = 5;
//	}
//	else {
//		*presentStep = 7;
//	}
//
//	s = *presentStep - *pastStep;
//	*pastStep = *presentStep;
//
//	
//	if (s < 0) {
//		s = abs(s);
//		sendData = (char)s+0x30;
//		sendData +=	49; //음수는 소문자
//	}
//	else {
//		sendData = (char)s + 0x30;
//		sendData += 17; //양수는 대문자
//	}
//
//	//printf("sendData = %c\n", sendData);
//	
//	return sendData;
//
//}


//최근
//char motorRotation(double freq, int* pastStep, int* presentStep, int* direction) {
//
//	s = 0;
//
//	if (freq <= 37.7) {
//		*presentStep = 0;
//	}
//	else if (freq > 37.7 && freq <= 38.2) {
//		*presentStep = 2;
//	}
//	else if (freq > 38.2 && freq <= 38.6) {
//		*presentStep = 3;
//	}
//	else if (freq > 38.6 && freq <= 39.3) {
//		*presentStep = 4;
//	}
//	else if (freq > 39.3 && freq <= 39.8) {
//		*presentStep = 5;
//	}
//	else if (freq > 39.8 && freq <= 40.1) {
//		*presentStep = 6;
//	}
//	else {
//		*presentStep = 7;
//	}
//
//	s = *presentStep - *pastStep;
//	*pastStep = *presentStep;
//
//
//	if (s < 0) {
//		s = abs(s);
//		sendData = (char)s + 0x30;
//		sendData += 49; //음수는 소문자
//	}
//	else {
//		sendData = (char)s + 0x30;
//		sendData += 17; //양수는 대문자
//	}
//
//	//printf("sendData = %c\n", sendData);
//
//	return sendData;
//
//}

//step final1
//char motorRotation(double freq, int* pastStep, int* presentStep, int* direction) {
//
//	s = 0;
//
//	if (freq <= 36.1) {
//		*presentStep = 1;
//	}
//	else if (freq > 36.1 && freq <= 36.8) {
//		*presentStep = 2;
//	}
//	else if (freq > 36.8 && freq <= 39.3) {
//		*presentStep = 3;
//	}
//	else if (freq > 39.3 && freq <= 40.1) {
//		*presentStep = 4;
//	}
//	else if (freq > 40.1 && freq <= 40.8) {
//		*presentStep = 5;
//	}
//	else if (freq > 40.8 && freq <= 41.2) {
//		*presentStep = 6;
//	}
//	else {
//		*presentStep = 7;
//	}
//
//	s = *presentStep - *pastStep;
//	*pastStep = *presentStep;
//
//
//	if (s < 0) {
//		s = abs(s);
//		sendData = (char)s + 0x30;
//		sendData += 49; //음수는 소문자
//	}
//	else {
//		sendData = (char)s + 0x30;
//		sendData += 17; //양수는 대문자
//	}
//
//	//printf("sendData = %c\n", sendData);
//
//	return sendData;
//
//}

//step final2
char motorRotation(double freq, int* pastStep, int* presentStep, int* direction) {

	s = 0;

	if (freq <= 36.2) {
		*presentStep = 1;
	}
	else if (freq > 36.2 && freq <= 37.7) {
		*presentStep = 2;
	}
	else if (freq > 37.7 && freq <= 38.9) {
		*presentStep = 3;
	}
	else if (freq > 38.9 && freq <= 39.9) {
		*presentStep = 4;
	}
	else if (freq > 39.9 && freq <= 40.9) {
		*presentStep = 5;
	}
	else if (freq > 40.9 && freq <= 41.8) {
		*presentStep = 6;
	}
	else {
		*presentStep = 7;
	}

	s = *presentStep - *pastStep;
	*pastStep = *presentStep;


	if (s < 0) {
		s = abs(s);
		sendData = (char)s + 0x30;
		sendData += 49; //음수는 소문자
	}
	else {
		sendData = (char)s + 0x30;
		sendData += 17; //양수는 대문자
	}

	//printf("sendData = %c\n", sendData);

	return sendData;

}


double freq = 0;
double fft_mag_sum = 0;
double fft_mag_max = 0;
double fft_mag_normal[17] = { 0.0 };
double buff_mre[1024] = { 0.0 };

double hann1024[1024] = { 0, 9.43076911874563e-06, 3.77227207172259e-05, 8.48747875361600e-05, 0.000150885190854377, 0.000235751440556431, 0.000339470335226355, 0.000462037962268236, 0.000603449698054204, 0.000763700208098517, 0.000942783447258899, 0.00114069265996464, 0.00135742038047137, 0.00159295843314272, 0.00184729793275873, 0.00212042928485096, 0.00241234218606456, 0.00272302562454685, 0.00305246788036268, 0.00340065652593669, 0.00376757842652187, 0.00415321974069544, 0.00455756592088058, 0.00498060171389536, 0.00542231116152819, 0.00588267760113986, 0.00636168366629197, 0.00685931128740208, 0.00737554169242533, 0.00791035540756274, 0.00846373225799557, 0.00903565136864665, 0.00962609116496754, 0.0102350293737528, 0.0108624430239796, 0.0115083084476750, 0.0121726012808081, 0.0128552964642097, 0.0135563682445171, 0.0142757901751459, 0.0150135351172876, 0.0157695752409334, 0.0165438820259238, 0.0173364262630248, 0.0181471780550296, 0.0189761068178861, 0.0198231812818515, 0.0206883694926708, 0.0215716388127831, 0.0224729559225521, 0.0233922868215237, 0.0243295968297081, 0.0252848505888881, 0.0262580120639531, 0.0272490445442584, 0.0282579106450099, 0.0292845723086745, 0.0303289908064159, 0.0313911267395551, 0.0324709400410572, 0.0335683899770422, 0.0346834351483225, 0.0358160334919637, 0.0369661422828719, 0.0381337181354052, 0.0393187170050104, 0.0405210941898847, 0.0417408043326614, 0.0429778014221215, 0.0442320387949294, 0.0455034691373926, 0.0467920444872470, 0.0480977162354663, 0.0494204351280952, 0.0507601512681078, 0.0521168141172897, 0.0534903724981445, 0.0548807745958242, 0.0562879679600843, 0.0577118995072619, 0.0591525155222783, 0.0606097616606654, 0.0620835829506157, 0.0635739237950560, 0.0650807279737445, 0.0666039386453922, 0.0681434983498062, 0.0696993490100581, 0.0712714319346745, 0.0728596878198510, 0.0744640567516894, 0.0760844782084577, 0.0777208910628734, 0.0793732335844094, 0.0810414434416222, 0.0827254577045039, 0.0844252128468556, 0.0861406447486842, 0.0878716886986207, 0.0896182793963619, 0.0913803509551333, 0.0931578369041747, 0.0949506701912478, 0.0967587831851655, 0.0985821076783428, 0.100420574889371, 0.102274115465610, 0.104142659485807, 0.106026136462734, 0.107924475345844, 0.109837604523954, 0.111765451827947, 0.113707944533490, 0.115665009363784, 0.117636572492321, 0.119622559545675, 0.121622895606305, 0.123637505215381, 0.125666312375629, 0.127709240554203, 0.129766212685566, 0.131837151174401, 0.133921977898538, 0.136020614211899, 0.138132980947465, 0.140258998420264, 0.142398586430377, 0.144551664265962, 0.146718150706299, 0.148897964024853, 0.151091021992361, 0.153297241879930, 0.155516540462157, 0.157748834020272, 0.159994038345295, 0.162252068741212, 0.164522840028169, 0.166806266545687, 0.169102262155893, 0.171410740246769, 0.173731613735420, 0.176064795071357, 0.178410196239802, 0.180767728765008, 0.183137303713596, 0.185518831697907, 0.187912222879380, 0.190317386971936, 0.192734233245387, 0.195162670528854, 0.197602607214214, 0.200053951259548, 0.202516610192617, 0.204990491114349, 0.207475500702346, 0.209971545214401, 0.212478530492035, 0.214996361964052, 0.217524944650102, 0.220064183164268, 0.222613981718660, 0.225174244127032, 0.227744873808411, 0.230325773790736, 0.232916846714519, 0.235517994836519, 0.238129120033426, 0.240750123805564, 0.243380907280608, 0.246021371217312, 0.248671416009252, 0.251330941688586, 0.253999847929824, 0.256678034053612, 0.259365399030529, 0.262061841484900, 0.264767259698622, 0.267481551614996, 0.270204614842579, 0.272936346659051, 0.275676644015082, 0.278425403538226, 0.281182521536818, 0.283947894003883, 0.286721416621066, 0.289502984762560, 0.292292493499057, 0.295089837601706, 0.297894911546082, 0.300707609516166, 0.303527825408337, 0.306355452835375, 0.309190385130475, 0.312032515351269, 0.314881736283861, 0.317737940446871, 0.320601020095493, 0.323470867225554, 0.326347373577590, 0.329230430640933, 0.332119929657800, 0.335015761627399, 0.337917817310040, 0.340825987231253, 0.343740161685923, 0.346660230742423, 0.349586084246766, 0.352517611826756, 0.355454702896154, 0.358397246658848, 0.361345132113036, 0.364298248055408, 0.367256483085347, 0.370219725609126, 0.373187863844121, 0.376160785823026, 0.379138379398078, 0.382120532245286, 0.385107131868672, 0.388098065604509, 0.391093220625574, 0.394092483945407, 0.397095742422567, 0.400102882764905, 0.403113791533836, 0.406128355148618, 0.409146459890638, 0.412167991907700, 0.415192837218320, 0.418220881716027, 0.421252011173667, 0.424286111247712, 0.427323067482572, 0.430362765314916, 0.433405090077989, 0.436449927005942, 0.439497161238159, 0.442546677823589, 0.445598361725086, 0.448652097823743, 0.451707770923241, 0.454765265754190, 0.457824466978478, 0.460885259193623, 0.463947526937127, 0.467011154690830, 0.470076026885267, 0.473142027904030, 0.476209042088129, 0.479276953740352, 0.482345647129634, 0.485415006495420, 0.488484916052031, 0.491555259993034, 0.494625922495611, 0.497696787724924, 0.500767739838490, 0.503838662990547, 0.506909441336427, 0.509979959036923, 0.513050100262661, 0.516119749198468, 0.519188790047744, 0.522257107036826, 0.525324584419356, 0.528391106480652, 0.531456557542067, 0.534520821965356, 0.537583784157038, 0.540645328572756, 0.543705339721636, 0.546763702170644, 0.549820300548938, 0.552875019552224, 0.555927743947105, 0.558978358575423, 0.562026748358610, 0.565072798302026, 0.568116393499295, 0.571157419136643, 0.574195760497226, 0.577231302965463, 0.580263932031351, 0.583293533294794, 0.586319992469909, 0.589343195389348, 0.592363028008595, 0.595379376410272, 0.598392126808439, 0.601401165552882, 0.604406379133402, 0.607407654184098, 0.610404877487641, 0.613397935979547, 0.616386716752442, 0.619371107060320, 0.622350994322798, 0.625326266129360, 0.628296810243601, 0.631262514607458, 0.634223267345437, 0.637178956768838, 0.640129471379962, 0.643074699876321, 0.646014531154834, 0.648948854316022, 0.651877558668189, 0.654800533731594, 0.657717669242628, 0.660628855157963, 0.663533981658711, 0.666432939154562, 0.669325618287922, 0.672211909938034, 0.675091705225098, 0.677964895514375, 0.680831372420289, 0.683691027810512, 0.686543753810046, 0.689389442805288, 0.692227987448096, 0.695059280659833, 0.697883215635408, 0.700699685847307, 0.703508585049608, 0.706309807281992, 0.709103246873738, 0.711888798447712, 0.714666356924337, 0.717435817525563, 0.720197075778817, 0.722950027520942, 0.725694568902128, 0.728430596389831, 0.731158006772678, 0.733876697164358, 0.736586565007504, 0.739287508077566, 0.741979424486662, 0.744662212687422, 0.747335771476822, 0.750000000000000, 0.752654797754059, 0.755300064591861, 0.757935700725802, 0.760561606731579, 0.763177683551939, 0.765783832500416, 0.768379955265053, 0.770965953912114, 0.773541730889773, 0.776107189031799, 0.778662231561218, 0.781206762093965, 0.783740684642520, 0.786263903619530, 0.788776323841411, 0.791277850531944, 0.793768389325845, 0.796247846272331, 0.798716127838655, 0.801173140913645, 0.803618792811209, 0.806052991273832, 0.808475644476059, 0.810886661027959, 0.813285949978571, 0.815673420819333, 0.818048983487500, 0.820412548369540, 0.822764026304515, 0.825103328587442, 0.827430366972643, 0.829745053677070, 0.832047301383620, 0.834337023244426, 0.836614132884136, 0.838878544403169, 0.841130172380956, 0.843368931879163, 0.845594738444892, 0.847807508113875, 0.850007157413629, 0.852193603366619, 0.854366763493374, 0.856526555815610, 0.858672898859316, 0.860805711657828, 0.862924913754887, 0.865030425207670, 0.867122166589807, 0.869200058994379, 0.871264024036890, 0.873313983858230, 0.875349861127608, 0.877371579045469, 0.879379061346395, 0.881372232301977, 0.883351016723674, 0.885315339965651, 0.887265127927592, 0.889200307057495, 0.891120804354451, 0.893026547371394, 0.894917464217833, 0.896793483562569, 0.898654534636379, 0.900500547234692, 0.902331451720234, 0.904147179025654, 0.905947660656133, 0.907732828691964, 0.909502615791117, 0.911256955191777, 0.912995780714867, 0.914719026766536, 0.916426628340643, 0.918118521021203, 0.919794640984819, 0.921454925003090, 0.923099310444994, 0.924727735279253, 0.926340138076674, 0.927936458012461, 0.929516634868517, 0.931080609035708, 0.932628321516118, 0.934159713925270, 0.935674728494331, 0.937173308072291, 0.938655396128118, 0.940120936752891, 0.941569874661908, 0.943002155196774, 0.944417724327462, 0.945816528654348, 0.947198515410229, 0.948563632462315, 0.949911828314189, 0.951243052107756, 0.952557253625161, 0.953854383290677, 0.955134392172584, 0.956397231985009, 0.957642855089749, 0.958871214498068, 0.960082263872470, 0.961275957528448, 0.962452250436204, 0.963611098222351, 0.964752457171584, 0.965876284228334, 0.966982536998386, 0.968071173750483, 0.969142153417897, 0.970195435599979, 0.971230980563686, 0.972248749245076, 0.973248703250784, 0.974230804859466, 0.975195017023231, 0.976141303369028, 0.977069628200024, 0.977979956496953, 0.978872253919429, 0.979746486807249, 0.980602622181658, 0.981440627746597, 0.982260471889917, 0.983062123684575, 0.983845552889800, 0.984610729952230, 0.985357626007035, 0.986086212878995, 0.986796463083574, 0.987488349827948, 0.988161847012022, 0.988816929229408, 0.989453571768390, 0.990071750612854, 0.990671442443191, 0.991252624637181, 0.991815275270844, 0.992359373119266, 0.992884897657402, 0.993391829060851, 0.993880148206600, 0.994349836673749, 0.994800876744203, 0.995233251403345, 0.995646944340671, 0.996041939950411, 0.996418223332115, 0.996775780291217, 0.997114597339568, 0.997434661695948, 0.997735961286542, 0.998018484745405, 0.998282221414882, 0.998527161346014, 0.998753295298914, 0.998960614743114, 0.999149111857886, 0.999318779532538, 0.999469611366685, 0.999601601670485, 0.999714745464859, 0.999809038481674, 0.999884477163907, 0.999941058665780, 0.999978780852864, 0.999997642302162, 0.999997642302162, 0.999978780852864, 0.999941058665780, 0.999884477163907, 0.999809038481674, 0.999714745464859, 0.999601601670485, 0.999469611366685, 0.999318779532538, 0.999149111857886, 0.998960614743114, 0.998753295298914, 0.998527161346014, 0.998282221414882, 0.998018484745405, 0.997735961286542, 0.997434661695948, 0.997114597339568, 0.996775780291217, 0.996418223332115, 0.996041939950411, 0.995646944340671, 0.995233251403345, 0.994800876744203, 0.994349836673749, 0.993880148206600, 0.993391829060851, 0.992884897657402, 0.992359373119266, 0.991815275270844, 0.991252624637181, 0.990671442443191, 0.990071750612854, 0.989453571768390, 0.988816929229408, 0.988161847012022, 0.987488349827948, 0.986796463083574, 0.986086212878995, 0.985357626007035, 0.984610729952230, 0.983845552889800, 0.983062123684575, 0.982260471889917, 0.981440627746597, 0.980602622181658, 0.979746486807249, 0.978872253919429, 0.977979956496953, 0.977069628200024, 0.976141303369028, 0.975195017023231, 0.974230804859466, 0.973248703250784, 0.972248749245076, 0.971230980563686, 0.970195435599979, 0.969142153417897, 0.968071173750483, 0.966982536998386, 0.965876284228334, 0.964752457171584, 0.963611098222351, 0.962452250436204, 0.961275957528448, 0.960082263872470, 0.958871214498068, 0.957642855089749, 0.956397231985009, 0.955134392172584, 0.953854383290677, 0.952557253625161, 0.951243052107756, 0.949911828314189, 0.948563632462315, 0.947198515410229, 0.945816528654348, 0.944417724327462, 0.943002155196774, 0.941569874661908, 0.940120936752891, 0.938655396128118, 0.937173308072291, 0.935674728494331, 0.934159713925270, 0.932628321516118, 0.931080609035708, 0.929516634868517, 0.927936458012461, 0.926340138076674, 0.924727735279253, 0.923099310444994, 0.921454925003090, 0.919794640984819, 0.918118521021203, 0.916426628340643, 0.914719026766536, 0.912995780714867, 0.911256955191777, 0.909502615791117, 0.907732828691964, 0.905947660656133, 0.904147179025654, 0.902331451720234, 0.900500547234692, 0.898654534636379, 0.896793483562569, 0.894917464217833, 0.893026547371394, 0.891120804354451, 0.889200307057495, 0.887265127927592, 0.885315339965651, 0.883351016723674, 0.881372232301977, 0.879379061346395, 0.877371579045469, 0.875349861127608, 0.873313983858230, 0.871264024036890, 0.869200058994379, 0.867122166589807, 0.865030425207670, 0.862924913754887, 0.860805711657828, 0.858672898859316, 0.856526555815610, 0.854366763493374, 0.852193603366619, 0.850007157413629, 0.847807508113875, 0.845594738444892, 0.843368931879163, 0.841130172380956, 0.838878544403169, 0.836614132884136, 0.834337023244426, 0.832047301383620, 0.829745053677070, 0.827430366972643, 0.825103328587442, 0.822764026304515, 0.820412548369540, 0.818048983487500, 0.815673420819333, 0.813285949978571, 0.810886661027959, 0.808475644476059, 0.806052991273832, 0.803618792811209, 0.801173140913645, 0.798716127838655, 0.796247846272331, 0.793768389325845, 0.791277850531944, 0.788776323841411, 0.786263903619530, 0.783740684642520, 0.781206762093965, 0.778662231561218, 0.776107189031799, 0.773541730889773, 0.770965953912114, 0.768379955265053, 0.765783832500416, 0.763177683551939, 0.760561606731579, 0.757935700725802, 0.755300064591861, 0.752654797754059, 0.750000000000000, 0.747335771476822, 0.744662212687422, 0.741979424486662, 0.739287508077566, 0.736586565007504, 0.733876697164358, 0.731158006772678, 0.728430596389831, 0.725694568902128, 0.722950027520942, 0.720197075778817, 0.717435817525563, 0.714666356924337, 0.711888798447712, 0.709103246873738, 0.706309807281992, 0.703508585049608, 0.700699685847307, 0.697883215635408, 0.695059280659833, 0.692227987448096, 0.689389442805288, 0.686543753810046, 0.683691027810512, 0.680831372420289, 0.677964895514375, 0.675091705225098, 0.672211909938034, 0.669325618287922, 0.666432939154562, 0.663533981658711, 0.660628855157963, 0.657717669242628, 0.654800533731594, 0.651877558668189, 0.648948854316022, 0.646014531154834, 0.643074699876321, 0.640129471379962, 0.637178956768838, 0.634223267345437, 0.631262514607458, 0.628296810243601, 0.625326266129360, 0.622350994322798, 0.619371107060320, 0.616386716752442, 0.613397935979547, 0.610404877487641, 0.607407654184098, 0.604406379133402, 0.601401165552882, 0.598392126808439, 0.595379376410272, 0.592363028008595, 0.589343195389348, 0.586319992469909, 0.583293533294794, 0.580263932031351, 0.577231302965463, 0.574195760497226, 0.571157419136643, 0.568116393499295, 0.565072798302026, 0.562026748358610, 0.558978358575423, 0.555927743947105, 0.552875019552224, 0.549820300548938, 0.546763702170644, 0.543705339721636, 0.540645328572756, 0.537583784157038, 0.534520821965356, 0.531456557542067, 0.528391106480652, 0.525324584419356, 0.522257107036826, 0.519188790047744, 0.516119749198468, 0.513050100262661, 0.509979959036923, 0.506909441336427, 0.503838662990547, 0.500767739838490, 0.497696787724924, 0.494625922495611, 0.491555259993034, 0.488484916052031, 0.485415006495420, 0.482345647129634, 0.479276953740352, 0.476209042088129, 0.473142027904030, 0.470076026885267, 0.467011154690830, 0.463947526937127, 0.460885259193623, 0.457824466978478, 0.454765265754190, 0.451707770923241, 0.448652097823743, 0.445598361725086, 0.442546677823589, 0.439497161238159, 0.436449927005942, 0.433405090077989, 0.430362765314916, 0.427323067482572, 0.424286111247712, 0.421252011173667, 0.418220881716027, 0.415192837218320, 0.412167991907700, 0.409146459890638, 0.406128355148618, 0.403113791533836, 0.400102882764905, 0.397095742422567, 0.394092483945407, 0.391093220625574, 0.388098065604509, 0.385107131868672, 0.382120532245286, 0.379138379398078, 0.376160785823026, 0.373187863844121, 0.370219725609126, 0.367256483085347, 0.364298248055408, 0.361345132113036, 0.358397246658848, 0.355454702896154, 0.352517611826756, 0.349586084246766, 0.346660230742423, 0.343740161685923, 0.340825987231253, 0.337917817310040, 0.335015761627399, 0.332119929657800, 0.329230430640933, 0.326347373577590, 0.323470867225554, 0.320601020095493, 0.317737940446871, 0.314881736283861, 0.312032515351269, 0.309190385130475, 0.306355452835375, 0.303527825408337, 0.300707609516166, 0.297894911546082, 0.295089837601706, 0.292292493499057, 0.289502984762560, 0.286721416621066, 0.283947894003883, 0.281182521536818, 0.278425403538226, 0.275676644015082, 0.272936346659051, 0.270204614842579, 0.267481551614996, 0.264767259698622, 0.262061841484900, 0.259365399030529, 0.256678034053612, 0.253999847929824, 0.251330941688586, 0.248671416009252, 0.246021371217312, 0.243380907280608, 0.240750123805564, 0.238129120033426, 0.235517994836519, 0.232916846714519, 0.230325773790736, 0.227744873808411, 0.225174244127032, 0.222613981718660, 0.220064183164268, 0.217524944650102, 0.214996361964052, 0.212478530492035, 0.209971545214401, 0.207475500702346, 0.204990491114349, 0.202516610192617, 0.200053951259548, 0.197602607214214, 0.195162670528854, 0.192734233245387, 0.190317386971936, 0.187912222879380, 0.185518831697907, 0.183137303713596, 0.180767728765008, 0.178410196239802, 0.176064795071357, 0.173731613735420, 0.171410740246769, 0.169102262155893, 0.166806266545687, 0.164522840028169, 0.162252068741212, 0.159994038345295, 0.157748834020272, 0.155516540462157, 0.153297241879930, 0.151091021992361, 0.148897964024853, 0.146718150706299, 0.144551664265962, 0.142398586430377, 0.140258998420264, 0.138132980947465, 0.136020614211899, 0.133921977898538, 0.131837151174401, 0.129766212685566, 0.127709240554203, 0.125666312375629, 0.123637505215381, 0.121622895606305, 0.119622559545675, 0.117636572492321, 0.115665009363784, 0.113707944533490, 0.111765451827947, 0.109837604523954, 0.107924475345844, 0.106026136462734, 0.104142659485807, 0.102274115465610, 0.100420574889371, 0.0985821076783428, 0.0967587831851655, 0.0949506701912478, 0.0931578369041747, 0.0913803509551333, 0.0896182793963619, 0.0878716886986207, 0.0861406447486842, 0.0844252128468556, 0.0827254577045039, 0.0810414434416222, 0.0793732335844094, 0.0777208910628734, 0.0760844782084577, 0.0744640567516894, 0.0728596878198510, 0.0712714319346745, 0.0696993490100581, 0.0681434983498062, 0.0666039386453922, 0.0650807279737445, 0.0635739237950560, 0.0620835829506157, 0.0606097616606654, 0.0591525155222783, 0.0577118995072619, 0.0562879679600843, 0.0548807745958242, 0.0534903724981445, 0.0521168141172897, 0.0507601512681078, 0.0494204351280952, 0.0480977162354663, 0.0467920444872470, 0.0455034691373926, 0.0442320387949294, 0.0429778014221215, 0.0417408043326614, 0.0405210941898847, 0.0393187170050104, 0.0381337181354052, 0.0369661422828719, 0.0358160334919637, 0.0346834351483225, 0.0335683899770422, 0.0324709400410572, 0.0313911267395551, 0.0303289908064159, 0.0292845723086745, 0.0282579106450099, 0.0272490445442584, 0.0262580120639531, 0.0252848505888881, 0.0243295968297081, 0.0233922868215237, 0.0224729559225521, 0.0215716388127831, 0.0206883694926708, 0.0198231812818515, 0.0189761068178861, 0.0181471780550296, 0.0173364262630248, 0.0165438820259238, 0.0157695752409334, 0.0150135351172876, 0.0142757901751459, 0.0135563682445171, 0.0128552964642097, 0.0121726012808081, 0.0115083084476750, 0.0108624430239796, 0.0102350293737528, 0.00962609116496754, 0.00903565136864665, 0.00846373225799557, 0.00791035540756274, 0.00737554169242533, 0.00685931128740208, 0.00636168366629197, 0.00588267760113986, 0.00542231116152819, 0.00498060171389536, 0.00455756592088058, 0.00415321974069544, 0.00376757842652187, 0.00340065652593669, 0.00305246788036268, 0.00272302562454685, 0.00241234218606456, 0.00212042928485096, 0.00184729793275873, 0.00159295843314272, 0.00135742038047137, 0.00114069265996464, 0.000942783447258899, 0.000763700208098517, 0.000603449698054204, 0.000462037962268236, 0.000339470335226355, 0.000235751440556431, 0.000150885190854377, 8.48747875361600e-05, 3.77227207172259e-05, 9.43076911874563e-06, 0 };


#define M_PI 3.1415926535897932384626433832795028841971693993751058209749445923078164
#define Ndata 1024

double mre_freq(double _x_re[], double _x_im[], double _X_re[], double _X_im[], double fft_mag[]) {

	//clock_t start, end;
	//double cpu_time_used;
	//start = clock();
	//// FFT 1000회 수행

	for (int i = 0; i < Ndata; i++) {
		buff_mre[i] = _x_re[i] * hann1024[i];
	}

	fft(buff_mre, _x_im, _X_re, _X_im);

	fft_mag_sum = 0;
	freq = 0;
	fft_mag_max = 0;

	for (int i = 0; i < Ndata; i++) {
		fft_mag[i] = pow(_X_re[i], 2) + pow(_X_im[i], 2);
		fft_mag[i] = sqrt(fft_mag[i]);

		
		if (i >= 13 && i <= 29) {
			if (fft_mag[i] > fft_mag_max) {
				fft_mag_max = fft_mag[i];
			}
		}
	}

	for (int i = 0; i <= 16; i++) {
		fft_mag_normal[i] = fft_mag[i+13] / fft_mag_max;
		if (fft_mag_normal[i] < 0.05) {
			fft_mag_normal[i] = 0;
		}
		fft_mag_sum += fft_mag_normal[i];
		freq = freq + fft_mag_normal[i] * ((double)i + 13.0)* 1.9531250;
	}

	freq = freq /fft_mag_sum;

	//end = clock();
	//cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
	//std::cout << "FFT 1000회 수행시간 = " << cpu_time_used << " [sec]";

	//// 입력을 x라 할 때, MATLAB의 "X = fft(x)/length(x)" 결과와 비교 --> 같아야함
	//std::cout << "\n\nX_re = \n";
	//for (int i = 0; i < 10; i++)
	//	std::cout << _X_re[i] << ", ";
	//std::cout << "\n\nX_im = \n";
	//for (int i = 0; i < 10; i++)
	//	std::cout << _X_im[i] << ", ";
	//std::cout << "\n\n";

	//system("pause");
	return freq;

}

// 쿨리-튜키 알고리즘을 통한 FFT 수행
void fft(double _x_re[], double _x_im[], double _X_re[], double _X_im[]) {

	// W의 lookup table 생성
	double W_sin[Ndata] = { 0 };
	double W_cos[Ndata] = { 0 };
	double inv_N = (double)1 / Ndata;
	for (int i = 0; i < (Ndata >> 1); i++) {
		W_cos[i] = cos(2 * M_PI * i * inv_N);
		W_sin[i] = sin(2 * M_PI * i * inv_N);
	}

	// 알고리즘 수행을 위한 인덱싱 처리
	int idx[Ndata] = { 0 };
	int c = 0, pwr = 1;
	while (pwr != Ndata) {
		c++;
		for (int i = 0; i < pwr; i++)
			idx[i + pwr] = idx[i] + (Ndata >> c);
		pwr <<= 1;
	}

	// 실수부, 허수부 각각 이전값과 현재값을 저장하도록 2개의 array 생성
	double X_re[2][Ndata] = { 0 };
	double X_im[2][Ndata] = { 0 };

	// 초기값을 입력값으로 저장
	for (int i = 0; i < Ndata; i++) {
		X_re[0][i] = _x_re[idx[i]];
		X_im[0][i] = _x_im[idx[i]];
	}

	// 쿨리-튜키 알고리즘을 적용한 FFT 수행
	int curr, prev, idx1, idx2, idx3;
	c = 0;
	pwr = 1;
	while (pwr != Ndata) {
		c++;
		curr = c & 1;
		prev = (c + 1) & 1;
		pwr <<= 1;
		for (int i = 0; i < (Ndata >> c); i++)
			for (int j = 0; j < (pwr >> 1); j++) {
				idx1 = i * pwr + j;
				idx2 = (i + 0.5) * pwr + j;
				idx3 = (Ndata >> c) * j;

				X_re[curr][idx1] = X_re[prev][idx1] + X_re[prev][idx2] * W_cos[idx3] + X_im[prev][idx2] * W_sin[idx3];
				X_re[curr][idx2] = X_re[prev][idx1] - X_re[prev][idx2] * W_cos[idx3] - X_im[prev][idx2] * W_sin[idx3];
				X_im[curr][idx1] = X_im[prev][idx1] + X_im[prev][idx2] * W_cos[idx3] - X_re[prev][idx2] * W_sin[idx3];
				X_im[curr][idx2] = X_im[prev][idx1] - X_im[prev][idx2] * W_cos[idx3] + X_re[prev][idx2] * W_sin[idx3];
			}
	}

	// 최종 결과 반영
	for (int i = 0; i < Ndata; i++) {
		_X_re[i] = X_re[curr][i] * inv_N;
		_X_im[i] = X_im[curr][i] * inv_N;
	}
}


